<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
	"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- namespace：匹配的接口  作用是隔离作用 其中#{}为占位符-->
<mapper namespace="com.cn.mybatis.mapper.UserMapper">
  <!-- 关联查询 -->




 <!-- sql片段：建议定义sql片段基于单表定义，这样sql片段的复用性高 建议不要包含where -->
 <sql id="query_user_where">
     <if test="userCustom!=null">
                    <if test="userCustom.sex!=null and userCustom.sex!=''">
                      user.sex=#{userCustom.sex
                    </if>
                    <if test="userCustom.username!=null and userCustom.username!=''">
                      user.username like '%${userCustom.username}%'
                   </if>
                   <if test="ids!=null">
                    <!-- 使用foreach传入多个id  connection:输入对象中集合属性，item每次生成对象中 open开始遍历的位置拼接的串 close结束遍历时拼接的串-->
                    <!-- 使用实现下面sql拼接 -->
                       <foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">
                          id=#{user_id}
                       </foreach>
                       <!-- 使用实现下面sql拼接 id in(1,10,12) -->
                        <foreach collection="ids" item="user_id" open="AND id in (" close=")" separator=",">
                          id=#{user_id}
                       </foreach>
                   </if>
             </if> 
 </sql>

                                           <!-- 定义resultMap ：将select id id_,username username_ from user where id=#{value} 和User做一个映射关系
                                              type:resultMap最终所映射的java类型 id:唯一标识-->
     <resultMap type="user" id="userResultMap">
     
       <id column="id_" property="id"/>                           <!-- id:表示结果集的唯一标识  column:查询出的列明 property：pojo中的属性名：最终resultMap对column和propert做一个映射关系-->
       <result column="username_" property="username"/>            <!-- result：对普通列的映射关系 -->
     </resultMap>
                                                                    <!-- resultMap输出映射 resultMap：指定定义的resultMap的id 如果在其他的mapper则要添加namespace-->
     <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
       select id id_,username username_ from user where id=#{value}
     
     </select>


                          <!-- 用户信息综合查询 User selectUserById(int id)-->
     <select id="findUserList" parameterType="com.cn.mybatis.pojo.UserQueryVo" resultType="UserCustom">
       select * from user
       <!-- #{userCustom.sex}:取出包装对象的值  where可以自动去掉条件中的第一个and -->
       <where>
       <!-- 引用sql片段的id 如果不再本mapper中 前面必须加namespace -->
          <include refid="query_user_where"/>
          <!-- 可能引用其他sql片段 -->
       </where>
    </select>

                       <!-- 用户信息综合总数列表查询 User selectUserById(int id) parameterType与findUserList一样-->
     <select id="findUserCount" parameterType="com.cn.mybatis.pojo.UserQueryVo" resultType="int">
       select count(*) from user
       <!-- #{userCustom.sex}:取出包装对象的值 -->
       where user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'
     
     </select>
     
     <select id="findUserByName" parameterType="String" resultType="UserCustom">
       select * from user
       <!-- #{userCustom.sex}:取出包装对象的值 -->
       where  user.username like '%${userCustom.username}%'
     
     </select>
     
     

    <select id="findUserById" parameterType="com.cn.mybatis.pojo.UserQueryVo" resultType="UserCustom">
       select * from user
       <!-- #{userCustom.sex}:取出包装对象的值 -->
       where user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'
     
     </select>










    <!-- _user:别名;批量定义时，resultType必须为类名
   <select id="selectUserById" parameterType="int" resultType="user">
		select * from user where id=#{value}
	</select>  -->
	<!--使用$拼接可能导致出现SQL注入
	${value}:接受输入参数的内容，如果传入的是简单类型，{}中只能使用value $：表示拼接符号-->
	
	<select id="selectByName" parameterType="int" resultType="com.cn.mybatis.pojo.User">
		select * from user where username like '%${value}%'
	</select>
	<!--将查询到主键，返回给user对象中
	<select keyProperty="id" order="AFTER"  >:得到刚insert进去的记录的主键值，只适用于自增主键
	selectKey：将查询到的主键值设置到parameterType制定的对象的属性
	order:<select keyProperty="id" order="AFTER"  >的执行顺序，相对于insert语句的执行顺序-->
	
   <insert id="insertUser" parameterType="com.cn.mybatis.pojo.User">
   <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
     SELECT LAST_INSERT_ID()
   </selectKey>
      insert into user(id,username,password,sex,birthday,isAdmin) value(#{id},#{username},#{password},#{sex},#{birthday},#{isAdmin})
   </insert>
   <!--对于非自增语句的返回
   通过UUID得到主键，将主键设置到user的id中，其次在执行insert时，从user中取出id的属性值
   -->
    <insert id="insertByUserName" parameterType="com.cn.mybatis.pojo.User">
   <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
     SELECT UUID()
   </selectKey>
      insert into user(id,username,password,sex,birthday,isAdmin) value(#{id},#{username},#{password},#{sex},#{birthday},#{isAdmin})
   </insert>
   <!---->
   <delete id="deleteById" parameterType="com.cn.mybatis.pojo.User">
    delete from user where id=#{id}
   </delete>
</mapper>